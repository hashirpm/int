{"version":3,"sources":["dbank.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","web3","account","token","dbank","tokenAddress","balance","dBankAddress","tokenPrice","ethPrice","a","this","loadBlockchainData","dispatch","window","ethereum","Web3","eth","net","getId","netId","getAccounts","accounts","getBalance","setState","alert","Contract","Token","abi","networks","address","dBank","utils","fromWei","e","console","log","amount","methods","deposit","send","value","toString","from","count","tokenSale","buyTokens","gas","preventDefault","withdraw","className","href","target","rel","src","alt","height","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","type","ref","input","placeholder","required","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,mC,ikBCqL5BC,G,yDAlGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,YACNC,QAAS,GACTC,MAAO,KACPC,MAAO,KACVC,aAAa,KACVC,QAAS,EACTC,aAAc,KACdC,WAAY,mBACZC,SAAS,MAXM,E,6FAvEnB,sBAAAC,EAAA,sEACQC,KAAKC,mBAAmBD,KAAKZ,MAAMc,UAD3C,gD,6HAIA,WAAyBA,GAAzB,+BAAAH,EAAA,yDACiC,qBAApBI,OAAOC,SADpB,wBAEUd,EAAO,IAAIe,IAAKF,OAAOC,UAFjC,SAGwBd,EAAKgB,IAAIC,IAAIC,QAHrC,cAGUC,EAHV,gBAI2BnB,EAAKgB,IAAII,cAJpC,UAO+B,qBAHrBC,EAJV,QAOwB,GAPxB,kCAQ4BrB,EAAKgB,IAAIM,WAAWD,EAAS,IARzD,QAQYhB,EARZ,OASMK,KAAKa,SAAS,CAAEtB,QAASoB,EAAS,GAAIhB,QAASA,EAASL,KAAMA,IATpE,wBAWMa,OAAOW,MAAM,8BAXnB,QAaI,IACQtB,EAAQ,IAAIF,EAAKgB,IAAIS,SAASC,EAAMC,IAAKD,EAAME,SAAST,GAAOU,SAC/D1B,EAAQ,IAAIH,EAAKgB,IAAIS,SAASK,EAAMH,IAAKG,EAAMF,SAAST,GAAOU,SAC/DvB,EAAewB,EAAMF,SAAST,GAAOU,QAErCzB,EAAesB,EAAME,SAAST,GAAOU,QAE3CnB,KAAKa,SAAS,CAAErB,MAAOA,EAAME,aAAaA,EAAcD,MAAOA,EAAOG,aAAcA,IACpFE,EAAWE,KAAKX,MAAMC,KAAK+B,MAAMC,QAAQtB,KAAKX,MAAMQ,WAAW,SACvEG,KAAKa,SAAS,CAACf,SAASA,IAKhB,MAAOyB,GACPC,QAAQC,IAAI,QAASF,GACrBpB,OAAOW,MAAM,iDA7BnB,wBAiCIX,OAAOW,MAAM,2BAjCjB,iD,mHAqCA,WAAcY,GAAd,SAAA3B,EAAA,yDAC2B,cAArBC,KAAKX,MAAMI,MADjB,yCAGYO,KAAKX,MAAMI,MAAMkC,QAAQC,UAAUC,KAAK,CAAEC,MAAOJ,EAAOK,WAAYC,KAAMhC,KAAKX,MAAME,UAHjG,sDAKMiC,QAAQC,IAAI,mBAAZ,MALN,wD,+GASA,WAAUQ,GAAV,SAAAlC,EAAA,yDAC2B,cAArBC,KAAKX,MAAMI,MADjB,yCAGYO,KAAKX,MAAM6C,UAAUP,QAAQQ,UAAUF,GAAOJ,KAAK,CAAEC,OAAQG,EAAQjC,KAAKX,MAAMQ,YAAYkC,WAAYC,KAAMhC,KAAKX,MAAME,QAAU6C,IAAI,MAHnJ,sDAKMZ,QAAQC,IAAI,mBAAZ,MALN,wD,oHAUA,WAAeF,GAAf,SAAAxB,EAAA,yDACEwB,EAAEc,iBACuB,cAArBrC,KAAKX,MAAMI,MAFjB,0CAIYO,KAAKX,MAAMI,MAAMkC,QAAQW,WAAWT,KAAK,CAAEG,KAAMhC,KAAKX,MAAME,UAJxE,uDAMMiC,QAAQC,IAAI,oBAAZ,MANN,yD,2EA0BA,WAAU,IAAD,OACP,OACE,yBAAKc,UAAU,kBACb,yBAAKA,UAAU,kEACb,uBACEA,UAAU,sCACVC,KAAK,GACLC,OAAO,SACPC,IAAI,uBAEJ,yBAAKC,IAAKlD,IAAO8C,UAAU,WAAWK,IAAI,OAAOC,OAAO,OACxD,yCAGJ,yBAAKN,UAAU,oCACb,6BACA,mDACA,6BACA,mEACA,6BAAK,6BACL,iDAAsB,6BAAtB,IAA6BvC,KAAKX,MAAMK,cAC5C,6GACI,6BAAK,6BACL,8CAAoBM,KAAKX,MAAMS,SAA/B,YACA,6BACA,sGACA,6BACA,yBAAKyC,UAAU,OACb,0BAAMO,KAAK,OAAOP,UAAU,gCAC1B,yBAAKA,UAAU,2BACb,kBAACQ,EAAA,EAAD,CAAMC,iBAAiB,UAAUC,GAAG,4BAClC,kBAACC,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,6BACE,6BADF,mCAGE,6BAHF,4BAKE,6BALF,sCAOE,6BACA,0BAAMC,SAAU,SAAC9B,GACfA,EAAEc,iBACF,IAAIX,EAAS,EAAK4B,cAAcxB,MAChCJ,GAAe,SAAG,GAAM,IACxB,EAAKE,QAAQF,KAEb,yBAAKa,UAAU,sBACb,6BACA,2BACEU,GAAG,gBACHM,KAAK,OACLC,KAAK,SACLC,IAAK,SAACC,GAAY,EAAKJ,cAAgBI,GACvCnB,UAAU,+BACVoB,YAAY,YACZC,UAAQ,KAEZ,4BAAQJ,KAAK,SAASjB,UAAU,kBAAkBsB,QAAS,SAACtC,GAAD,OAAO,EAAKK,QAAQL,KAA/E,cAKN,kBAAC2B,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,YAC7B,6BADF,2CAGE,6BACA,6BACA,6BACE,4BAAQI,KAAK,SAASjB,UAAU,kBAAkBsB,QAAS,SAACtC,GAAD,OAAO,EAAKe,SAASf,KAAhF,wB,GA5JJuC,cCEEC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9b2e487e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dbank.adca41d3.png\";","import { Tabs, Tab } from 'react-bootstrap'\nimport dBank from '../abis/dBank.json'\nimport React, { Component } from 'react';\nimport Token from '../abis/Token.json'\n\nimport dbank from '../dbank.png';\nimport Web3 from 'web3';\nimport './App.css';\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum)\n      const netId = await web3.eth.net.getId()\n      const accounts = await web3.eth.getAccounts()\n\n      //load balance\n      if (typeof accounts[0] !== 'undefined') {\n        const balance = await web3.eth.getBalance(accounts[0])\n        this.setState({ account: accounts[0], balance: balance, web3: web3 })\n      } else {\n        window.alert('Please login with MetaMask')\n      }\n      try {\n        const token = new web3.eth.Contract(Token.abi, Token.networks[netId].address)\n        const dbank = new web3.eth.Contract(dBank.abi, dBank.networks[netId].address)\n        const dBankAddress = dBank.networks[netId].address\n \n        const tokenAddress = Token.networks[netId].address\n\n        this.setState({ token: token,tokenAddress:tokenAddress, dbank: dbank, dBankAddress: dBankAddress })\n  const ethPrice=  this.state.web3.utils.fromWei(this.state.tokenPrice,\"ether\")\nthis.setState({ethPrice:ethPrice})\n    //       console.log((web3.utils.toWei(\n    //     web3.utils.toBN(tokenSale.methods.tokenPrice()), // converts Number to BN, which is accepted by `toWei()`\n    //     'ether'\n    // )));\n      } catch (e) {\n        console.log('Error', e)\n        window.alert('Contracts not deployed to the current network')\n      }\n    }\n    else {\n      window.alert('Please install MetaMask')\n    }\n  }\n\n  async deposit(amount) {\n    if (this.state.dbank !== 'undefined') {\n      try {\n        await this.state.dbank.methods.deposit().send({ value: amount.toString(), from: this.state.account })\n      } catch (e) {\n        console.log('Error, deposit: ', e)\n      }\n    }\n  }\n  async buy(count) {\n    if (this.state.dbank !== 'undefined') {\n      try {\n        await this.state.tokenSale.methods.buyTokens(count).send({ value: (count * this.state.tokenPrice).toString(), from: this.state.account , gas:500000 })\n      } catch (e) {\n        console.log('Error, deposit: ', e)\n      }\n    }\n  }\n\n  async withdraw(e) {\n    e.preventDefault()\n    if (this.state.dbank !== 'undefined') {\n      try {\n        await this.state.dbank.methods.withdraw().send({ from: this.state.account })\n      } catch (e) {\n        console.log('Error, withdraw: ', e)\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      token: null,\n      dbank: null,\n   tokenAddress:null,\n      balance: 0,\n      dBankAddress: null,\n      tokenPrice: \"1000000000000000\",\n      ethPrice:null,\n    }\n  }\n\n  render() {\n    return (\n      <div className='text-monospace'>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={dbank} className=\"App-logo\" alt=\"logo\" height=\"32\" />\n            <b>INT BANK</b>\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5 text-center\">\n          <br></br>\n          <h1>Welcome to INT BANK</h1>\n          <br/>\n          <h2>Introducing \"Interest Token\" (INT)!</h2>\n          <br/><br/>\n          <h4>Your Token Address<br/> {this.state.tokenAddress}</h4>\n      <p> Please import this token address to your Metamask Wallet to see your balance.</p>\n          <br/><br/>\n          <h4>Token price is {this.state.ethPrice}  Ether </h4>\n          <br></br>\n          <h6>Depost your Ether and take your interest in the form of Interest Token</h6>\n          <br></br>\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"deposit\" title=\"Deposit\">\n                    <div>\n                      <br></br>\n                      How much do you want to deposit?\n                      <br></br>\n                      (min. amount is 0.01 ETH)\n                      <br></br>\n                      (1 deposit is possible at the time)\n                      <br></br>\n                      <form onSubmit={(e) => {\n                        e.preventDefault()\n                        let amount = this.depositAmount.value\n                        amount = amount * 10 ** 18\n                        this.deposit(amount)\n                      }}>\n                        <div className='form-group mr-sm-2'>\n                          <br></br>\n                          <input\n                            id='depositAmount'\n                            step=\"0.01\"\n                            type='number'\n                            ref={(input) => { this.depositAmount = input }}\n                            className=\"form-control form-control-md\"\n                            placeholder='amount...'\n                            required />\n                        </div>\n                        <button type='submit' className='btn btn-primary' onClick={(e) => this.deposit(e)}>DEPOSIT</button>\n                      </form>\n\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                    <br></br>\n                    Do you want to withdraw + take interest?\n                    <br></br>\n                    <br></br>\n                    <div>\n                      <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\n                    </div>\n                  </Tab>\n                 \n\n                </Tabs>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}